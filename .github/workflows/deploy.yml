name: Deploy CloudFormation Stack

on:
  push:
    branches:
      - main
      - delete-organization
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  STACK_NAME: chatgpt-usage-tracker
  LAMBDA_ZIP: lambda-package.zip

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install awscli boto3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Package and Upload Lambda
        run: |
          # Create temporary directory for packaging
          mkdir -p package

          # Copy all Lambda functions
          cp src/lambda/* package/

          # Install dependencies
          cd package
          pip install \
            boto3==1.28.38 \
            python-json-logger==2.0.7 \
            -t .

          # Remove unnecessary files
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -type d -name "*.dist-info" -exec rm -rf {} +
          find . -type d -name "*.egg-info" -exec rm -rf {} +

          # Create deployment package
          zip -r ../${{ env.LAMBDA_ZIP }} ./*
          cd ..

          # Show contents for debugging
          echo "Contents of Lambda package:"
          unzip -l ${{ env.LAMBDA_ZIP }}

          # Set S3 key with timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          S3_KEY="deployments/$TIMESTAMP/${{ env.LAMBDA_ZIP }}"
          echo "LAMBDA_S3_KEY=$S3_KEY" >> $GITHUB_ENV

          # Upload to S3
          aws s3 cp ${{ env.LAMBDA_ZIP }} s3://${{ secrets.AWS_S3_BUCKET }}/$S3_KEY

          # Verify upload
          aws s3api head-object --bucket ${{ secrets.AWS_S3_BUCKET }} --key $S3_KEY || {
            echo "Failed to verify Lambda package upload"
            exit 1
          }
          echo "S3 upload verified successfully"

      - name: Check and Delete Failed Stack
        run: |
          # Check if stack exists and is in ROLLBACK_COMPLETE state
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "STACK_NOT_FOUND")

          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state. Deleting stack..."
            aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
            echo "Stack deleted successfully"
          fi

      - name: Deploy CloudFormation Stack
        run: |
          echo "Deploying with parameters:"
          echo "DeploymentBucket: ${{ secrets.AWS_S3_BUCKET }}"
          echo "DeploymentPackageKey: ${{ env.LAMBDA_S3_KEY }}"

          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              DeploymentBucket=${{ secrets.AWS_S3_BUCKET }} \
              DeploymentPackageKey=${{ env.LAMBDA_S3_KEY }}
