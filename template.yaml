AWSTemplateFormatVersion: "2010-09-09"
Description: ChatGPT API Usage Tracking System

Parameters:
  TableName:
    Type: String
    Default: chatgpt_usage_tracking
    Description: Name of the DynamoDB table for storing usage data
  OrgTableName:
    Type: String
    Default: chatgpt_organizations
    Description: Name of the DynamoDB table for storing organization data
  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment package
  DeploymentPackageKey:
    Type: String
    Description: S3 key for Lambda deployment package

Resources:
  # DynamoDB Table for Usage Tracking
  ChatGPTUsageTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: organization_id
          AttributeType: S
        - AttributeName: record_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: organization_id
          KeyType: HASH
        - AttributeName: record_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: OrgTimestampIndex
          KeySchema:
            - AttributeName: organization_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: UserTimestampIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Organization Table for Auth
  OrganizationTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Ref OrgTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: organization_id
          AttributeType: S
        - AttributeName: auth_token
          AttributeType: S
      KeySchema:
        - AttributeName: organization_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AuthTokenIndex
          KeySchema:
            - AttributeName: auth_token
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Function Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ChatGPTUsageTable.Arn
                  - !GetAtt OrganizationTable.Arn
        - PolicyName: DynamoDBGSIAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: dynamodb:Query
                Resource:
                  - !Sub "${ChatGPTUsageTable.Arn}/index/*"
                  - !Sub "${OrganizationTable.Arn}/index/*"

  # Lambda Function for POST
  ChatGPTUsageFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref DeploymentPackageKey
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
          POWERTOOLS_SERVICE_NAME: chatgpt-usage-tracker
          LOG_LEVEL: INFO

  # Lambda Function for Getting Costs
  GetCostsFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref DeploymentPackageKey
      Handler: get_costs_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
          POWERTOOLS_SERVICE_NAME: chatgpt-usage-tracker
          LOG_LEVEL: INFO

  # Lambda Function for Getting Organization Costs
  GetOrgCostsFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref DeploymentPackageKey
      Handler: get_org_costs_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
          POWERTOOLS_SERVICE_NAME: chatgpt-usage-tracker
          LOG_LEVEL: INFO

  # Lambda Function for Organization Registration
  RegisterOrgFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref DeploymentPackageKey
      Handler: register_org_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref OrgTableName
          POWERTOOLS_SERVICE_NAME: chatgpt-usage-tracker
          LOG_LEVEL: INFO

  # Lambda Function for Organization Deletion
  DeleteOrgFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref DeploymentPackageKey
      Handler: delete_org_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref OrgTableName
          POWERTOOLS_SERVICE_NAME: chatgpt-usage-tracker
          LOG_LEVEL: INFO

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: ChatGPT Usage Tracking API
      Description: API for tracking ChatGPT usage
      ApiKeySourceType: HEADER

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ApiStage
    Properties:
      Name: ChatGPTUsageTrackerApiKey
      Description: API Key for ChatGPT Usage Tracker
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: Prod

  # Usage Plan
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: Prod
      Description: Usage plan for ChatGPT Usage Tracker API
      UsagePlanName: ChatGPTUsageTrackerPlan

  # Associate API Key with Usage Plan
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Track Usage Resource and Method
  ApiResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: track

  ApiMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatGPTUsageFunction.Arn}/invocations

  # Get Costs Resource and Method
  GetCostsResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: costs

  GetCostsMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GetCostsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCostsFunction.Arn}/invocations
      RequestParameters:
        method.request.querystring.user_id: false
        method.request.querystring.organization_id: false
        method.request.querystring.start_date: false
        method.request.querystring.end_date: false

  # Get Organization Costs Resource and Method
  GetOrgCostsResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: organization-costs

  GetOrgCostsMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GetOrgCostsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrgCostsFunction.Arn}/invocations
      RequestParameters:
        method.request.querystring.organization_id: false
        method.request.querystring.start_date: false
        method.request.querystring.end_date: false

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    DependsOn:
      - ApiMethod
      - GetCostsMethod
      - GetOrgCostsMethod
    Properties:
      RestApiId: !Ref ApiGateway

  ApiStage:
    Type: AWS::ApiGateway::Stage
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: Prod

  # Lambda Permissions
  LambdaPermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatGPTUsageFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/track

  GetCostsLambdaPermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCostsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/costs

  GetOrgCostsLambdaPermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetOrgCostsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/organization-costs

  # API Gateway Resource and Method for Organization Registration
  RegisterOrgResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: register-organization

  RegisterOrgMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RegisterOrgResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterOrgFunction.Arn}/invocations

  RegisterOrgLambdaPermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RegisterOrgFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/register-organization

  # API Gateway Resource and Method for Organization Deletion
  DeleteOrgResource:
    Type: AWS::ApiGateway::Resource
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: delete-organization

  DeleteOrgMethod:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref DeleteOrgResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteOrgFunction.Arn}/invocations

  DeleteOrgLambdaPermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteOrgFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/delete-organization

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for the ChatGPT usage tracking function
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/track"

  GetCostsApiEndpoint:
    Description: API Gateway endpoint URL for getting user costs
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/costs"

  GetOrgCostsApiEndpoint:
    Description: API Gateway endpoint URL for getting organization costs
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/organization-costs"

  RegisterOrgApiEndpoint:
    Description: API Gateway endpoint URL for registering organizations
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/register-organization"

  DeleteOrgApiEndpoint:
    Description: API Gateway endpoint URL for deleting organizations
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete-organization"

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref TableName

  ApiKey:
    Description: API Key for accessing the endpoints
    Value: !Ref ApiKey
